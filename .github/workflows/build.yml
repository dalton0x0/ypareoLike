name: CI/CD Pipeline YpareoLike

on:
  push:
    branches:
      - main
      - develop
      - 'releases/*'
  pull_request:
    branches:
      - main
      - develop
      - 'releases/*'
    types: [opened, synchronize, reopened]

jobs:
  code-quality:
    name: Qodana Code Quality Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
      security-events: write
    outputs:
      quality-passed: ${{ steps.qodana.outcome == 'success' }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Qodana Scan
        id: qodana
        uses: JetBrains/qodana-action@v2025.2
        with:
          pr-mode: ${{ github.event_name == 'pull_request' }}
          upload-result: true
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_129550057 }}
          QODANA_ENDPOINT: 'https://qodana.cloud'

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.quality-passed == 'true'
    outputs:
      sonar-passed: ${{ steps.sonar.outcome == 'success' }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze with SonarQube
        id: sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify compile org.sonarsource.scanner.maven:sonar-maven-plugin:5.2.0.4988 \
            -Dsonar.projectKey=dalton0x0_ypareoLike \
            -Dsonar.skipTests=true

  test-and-build:
    name: Build & Test (Maven)
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    if: needs.sonarqube-analysis.outputs.sonar-passed == 'true'
    outputs:
      build-success: ${{ steps.build.outcome == 'success' }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 21 with Maven cache
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Run tests & build with Maven
        id: build
        run: mvn clean package -DskipTests

      - name: Setup environment variables
        run: |
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> $GITHUB_ENV
          echo "DOCKER_REPO=${{ secrets.DOCKER_REPO }}" >> $GITHUB_ENV

  docker-build-and-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: test-and-build
    if: needs.test-and-build.outputs.build-success == 'true'

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_REPO }}:latest .

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_REPO }}:latest

  deploy:
    name: Deploy (Docker Compose)
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    if: needs.docker-build-and-push.result == 'success'

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup environment variables
        run: |
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> $GITHUB_ENV

      - name: Start services with Docker Compose
        run: docker compose -f docker-compose.yml up -d
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          SPRING_DATASOURCE_USERNAME: ${{ env.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.SPRING_DATASOURCE_PASSWORD }}

      - name: Shutdown Docker Compose (cleanup)
        if: always()
        run: docker compose -f docker-compose.yml down
